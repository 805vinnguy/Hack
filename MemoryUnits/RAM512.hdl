// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way (in = true, sel = address[6..8], a = ram0, b = ram1, c = ram2, d = ram3, e = ram4, f = ram5, g = ram6, h = ram7);
    And (a = ram0, b = load, out = ld0);
    And (a = ram1, b = load, out = ld1);
    And (a = ram2, b = load, out = ld2);
    And (a = ram3, b = load, out = ld3);
    And (a = ram4, b = load, out = ld4);
    And (a = ram5, b = load, out = ld5);
    And (a = ram6, b = load, out = ld6);
    And (a = ram7, b = load, out = ld7);
    RAM64 (in = in, load = ld0, address = address[0..5], out = out0);
    RAM64 (in = in, load = ld1, address = address[0..5], out = out1);
    RAM64 (in = in, load = ld2, address = address[0..5], out = out2);
    RAM64 (in = in, load = ld3, address = address[0..5], out = out3);
    RAM64 (in = in, load = ld4, address = address[0..5], out = out4);
    RAM64 (in = in, load = ld5, address = address[0..5], out = out5);
    RAM64 (in = in, load = ld6, address = address[0..5], out = out6);
    RAM64 (in = in, load = ld7, address = address[0..5], out = out7);
    Mux8Way16 (a = out0, b = out1, c = out2, d = out3, e = out4, f = out5, g = out6, h = out7, sel = address[6..8], out = out);
}